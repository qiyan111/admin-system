{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      dashboardData: {\n        pendingOrders: 0,\n        totalOwners: 0,\n        visitorCount: 0,\n        availableParkingSpots: 0\n      },\n      recentVisitors: [],\n      workOrderChart: null,\n      workOrderTypeChart: null\n    };\n  },\n  mounted() {\n    this.fetchDashboardData();\n    this.fetchRecentVisitors();\n    this.initCharts();\n  },\n  beforeUnmount() {\n    // 销毁图表资源\n    if (this.workOrderChart) {\n      this.workOrderChart.destroy();\n    }\n    if (this.workOrderTypeChart) {\n      this.workOrderTypeChart.destroy();\n    }\n  },\n  methods: {\n    fetchDashboardData() {\n      // 实际项目中这里应该从API获取数据\n      // 这里使用模拟数据\n      setTimeout(() => {\n        this.dashboardData = {\n          pendingOrders: 24,\n          totalOwners: 156,\n          visitorCount: 35,\n          availableParkingSpots: 42\n        };\n      }, 500);\n    },\n    fetchRecentVisitors() {\n      // 模拟从API获取最近访客记录\n      setTimeout(() => {\n        this.recentVisitors = [{\n          name: '张先生',\n          targetPerson: '李业主',\n          reason: '亲友拜访',\n          visitTime: '2023-04-22 10:30',\n          status: 'completed'\n        }, {\n          name: '王女士',\n          targetPerson: '赵业主',\n          reason: '送快递',\n          visitTime: '2023-04-22 09:15',\n          status: 'in-progress'\n        }, {\n          name: '刘先生',\n          targetPerson: '陈业主',\n          reason: '维修水电',\n          visitTime: '2023-04-21 14:45',\n          status: 'completed'\n        }, {\n          name: '孙女士',\n          targetPerson: '吴业主',\n          reason: '商务拜访',\n          visitTime: '2023-04-21 11:20',\n          status: 'pending'\n        }];\n      }, 700);\n    },\n    initCharts() {\n      this.$nextTick(() => {\n        // 初始化工单处理情况图表\n        const workOrderCtx = this.$refs.workOrderChart;\n        if (workOrderCtx) {\n          this.workOrderChart = new Chart(workOrderCtx, {\n            type: 'bar',\n            data: {\n              labels: ['1月', '2月', '3月', '4月', '5月', '6月'],\n              datasets: [{\n                label: '已完成',\n                data: [12, 19, 15, 22, 25, 18],\n                backgroundColor: '#4caf50'\n              }, {\n                label: '进行中',\n                data: [5, 8, 6, 9, 10, 7],\n                backgroundColor: '#2196f3'\n              }, {\n                label: '待处理',\n                data: [3, 2, 4, 5, 2, 3],\n                backgroundColor: '#ff9800'\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: 'top'\n                },\n                title: {\n                  display: false\n                }\n              }\n            }\n          });\n        }\n\n        // 初始化工单类型占比图表\n        const workOrderTypeCtx = this.$refs.workOrderTypeChart;\n        if (workOrderTypeCtx) {\n          this.workOrderTypeChart = new Chart(workOrderTypeCtx, {\n            type: 'doughnut',\n            data: {\n              labels: ['水电维修', '设施报修', '公共设施', '安全问题', '其他'],\n              datasets: [{\n                data: [35, 25, 15, 10, 15],\n                backgroundColor: ['#4caf50', '#2196f3', '#ff9800', '#f44336', '#9c27b0']\n              }]\n            },\n            options: {\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: 'right'\n                }\n              }\n            }\n          });\n        }\n      });\n    },\n    getStatusText(status) {\n      const statusMap = {\n        'pending': '待处理',\n        'in-progress': '进行中',\n        'completed': '已完成'\n      };\n      return statusMap[status] || status;\n    }\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","name","data","dashboardData","pendingOrders","totalOwners","visitorCount","availableParkingSpots","recentVisitors","workOrderChart","workOrderTypeChart","mounted","fetchDashboardData","fetchRecentVisitors","initCharts","beforeUnmount","destroy","methods","setTimeout","targetPerson","reason","visitTime","status","$nextTick","workOrderCtx","$refs","type","labels","datasets","label","backgroundColor","options","responsive","plugins","legend","position","title","display","workOrderTypeCtx","getStatusText","statusMap"],"sources":["D:/admin-system/src/views/Dashboard/dashboard.js"],"sourcesContent":["import { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  data() {\r\n    return {\r\n      dashboardData: {\r\n        pendingOrders: 0,\r\n        totalOwners: 0,\r\n        visitorCount: 0,\r\n        availableParkingSpots: 0\r\n      },\r\n      recentVisitors: [],\r\n      workOrderChart: null,\r\n      workOrderTypeChart: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchDashboardData();\r\n    this.fetchRecentVisitors();\r\n    this.initCharts();\r\n  },\r\n  beforeUnmount() {\r\n    // 销毁图表资源\r\n    if (this.workOrderChart) {\r\n      this.workOrderChart.destroy();\r\n    }\r\n    if (this.workOrderTypeChart) {\r\n      this.workOrderTypeChart.destroy();\r\n    }\r\n  },\r\n  methods: {\r\n    fetchDashboardData() {\r\n      // 实际项目中这里应该从API获取数据\r\n      // 这里使用模拟数据\r\n      setTimeout(() => {\r\n        this.dashboardData = {\r\n          pendingOrders: 24,\r\n          totalOwners: 156,\r\n          visitorCount: 35,\r\n          availableParkingSpots: 42\r\n        };\r\n      }, 500);\r\n    },\r\n    fetchRecentVisitors() {\r\n      // 模拟从API获取最近访客记录\r\n      setTimeout(() => {\r\n        this.recentVisitors = [\r\n          { name: '张先生', targetPerson: '李业主', reason: '亲友拜访', visitTime: '2023-04-22 10:30', status: 'completed' },\r\n          { name: '王女士', targetPerson: '赵业主', reason: '送快递', visitTime: '2023-04-22 09:15', status: 'in-progress' },\r\n          { name: '刘先生', targetPerson: '陈业主', reason: '维修水电', visitTime: '2023-04-21 14:45', status: 'completed' },\r\n          { name: '孙女士', targetPerson: '吴业主', reason: '商务拜访', visitTime: '2023-04-21 11:20', status: 'pending' }\r\n        ];\r\n      }, 700);\r\n    },\r\n    initCharts() {\r\n      this.$nextTick(() => {\r\n        // 初始化工单处理情况图表\r\n        const workOrderCtx = this.$refs.workOrderChart;\r\n        if (workOrderCtx) {\r\n          this.workOrderChart = new Chart(workOrderCtx, {\r\n            type: 'bar',\r\n            data: {\r\n              labels: ['1月', '2月', '3月', '4月', '5月', '6月'],\r\n              datasets: [\r\n                {\r\n                  label: '已完成',\r\n                  data: [12, 19, 15, 22, 25, 18],\r\n                  backgroundColor: '#4caf50'\r\n                },\r\n                {\r\n                  label: '进行中',\r\n                  data: [5, 8, 6, 9, 10, 7],\r\n                  backgroundColor: '#2196f3'\r\n                },\r\n                {\r\n                  label: '待处理',\r\n                  data: [3, 2, 4, 5, 2, 3],\r\n                  backgroundColor: '#ff9800'\r\n                }\r\n              ]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'top',\r\n                },\r\n                title: {\r\n                  display: false\r\n                }\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        // 初始化工单类型占比图表\r\n        const workOrderTypeCtx = this.$refs.workOrderTypeChart;\r\n        if (workOrderTypeCtx) {\r\n          this.workOrderTypeChart = new Chart(workOrderTypeCtx, {\r\n            type: 'doughnut',\r\n            data: {\r\n              labels: ['水电维修', '设施报修', '公共设施', '安全问题', '其他'],\r\n              datasets: [\r\n                {\r\n                  data: [35, 25, 15, 10, 15],\r\n                  backgroundColor: [\r\n                    '#4caf50',\r\n                    '#2196f3',\r\n                    '#ff9800',\r\n                    '#f44336',\r\n                    '#9c27b0'\r\n                  ]\r\n                }\r\n              ]\r\n            },\r\n            options: {\r\n              responsive: true,\r\n              plugins: {\r\n                legend: {\r\n                  position: 'right',\r\n                }\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    },\r\n    getStatusText(status) {\r\n      const statusMap = {\r\n        'pending': '待处理',\r\n        'in-progress': '进行中',\r\n        'completed': '已完成'\r\n      };\r\n      return statusMap[status] || status;\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}