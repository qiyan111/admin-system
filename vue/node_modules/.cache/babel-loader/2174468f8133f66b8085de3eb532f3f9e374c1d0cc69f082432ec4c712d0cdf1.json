{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n// 导入所需依赖\nimport { ref, reactive, computed, onMounted, watch } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { formatDate as formatDateUtil } from '@/utils/formatter';\nexport default function useWorkOrder() {\n  const router = useRouter();\n\n  // 响应式数据\n  const workOrders = ref([]);\n  const currentOrder = ref(null);\n  const tableHeight = ref('calc(100vh - 300px)');\n\n  // 分页信息\n  const pagination = reactive({\n    current: 1,\n    pageSize: 10,\n    total: 0\n  });\n\n  // 加载状态\n  const loading = reactive({\n    list: false,\n    detail: false,\n    submit: false,\n    activity: false,\n    status: false,\n    delete: false\n  });\n\n  // 筛选表单\n  const filterForm = reactive({\n    orderNumber: '',\n    status: '',\n    dateRange: []\n  });\n\n  // 日期快捷选项\n  const dateShortcuts = [{\n    text: '最近一周',\n    value: () => {\n      const end = new Date();\n      const start = new Date();\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n      return [start, end];\n    }\n  }, {\n    text: '最近一个月',\n    value: () => {\n      const end = new Date();\n      const start = new Date();\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n      return [start, end];\n    }\n  }, {\n    text: '最近三个月',\n    value: () => {\n      const end = new Date();\n      const start = new Date();\n      start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n      return [start, end];\n    }\n  }];\n\n  // 对话框状态\n  const dialogs = reactive({\n    detail: {\n      visible: false\n    },\n    form: {\n      visible: false,\n      isEdit: false\n    },\n    status: {\n      visible: false,\n      order: null\n    }\n  });\n\n  // 工单表单\n  const orderFormRef = ref(null);\n  const orderForm = reactive({\n    id: '',\n    title: '',\n    type: '',\n    priority: 'medium',\n    ownerName: '',\n    contactPhone: '',\n    address: '',\n    description: ''\n  });\n\n  // 工单表单验证规则\n  const orderFormRules = {\n    title: [{\n      required: true,\n      message: '请输入工单标题',\n      trigger: 'blur'\n    }, {\n      min: 3,\n      max: 50,\n      message: '长度在 3 到 50 个字符',\n      trigger: 'blur'\n    }],\n    type: [{\n      required: true,\n      message: '请选择工单类型',\n      trigger: 'change'\n    }],\n    priority: [{\n      required: true,\n      message: '请选择优先级',\n      trigger: 'change'\n    }],\n    ownerName: [{\n      required: true,\n      message: '请输入业主姓名',\n      trigger: 'blur'\n    }],\n    contactPhone: [{\n      required: true,\n      message: '请输入联系电话',\n      trigger: 'blur'\n    }, {\n      pattern: /^1[3-9]\\d{9}$/,\n      message: '请输入正确的手机号码',\n      trigger: 'blur'\n    }],\n    address: [{\n      required: true,\n      message: '请输入地址',\n      trigger: 'blur'\n    }],\n    description: [{\n      required: true,\n      message: '请输入工单描述',\n      trigger: 'blur'\n    }, {\n      min: 10,\n      max: 500,\n      message: '长度在 10 到 500 个字符',\n      trigger: 'blur'\n    }]\n  };\n\n  // 活动记录表单\n  const activityForm = reactive({\n    type: 'process',\n    remark: ''\n  });\n\n  // 状态变更表单\n  const statusForm = reactive({\n    status: '',\n    remark: ''\n  });\n\n  // 计算属性：状态颜色映射\n  const getStatusTagType = status => {\n    const statusMap = {\n      'pending': 'info',\n      'processing': 'warning',\n      'completed': 'success',\n      'cancelled': 'danger'\n    };\n    return statusMap[status] || 'info';\n  };\n\n  // 计算属性：类型颜色映射\n  const getTypeTagType = type => {\n    const typeMap = {\n      'repair': 'danger',\n      'complaint': 'warning',\n      'suggestion': 'info',\n      'other': ''\n    };\n    return typeMap[type] || '';\n  };\n\n  // 计算属性：优先级颜色映射\n  const getPriorityTagType = priority => {\n    const priorityMap = {\n      'low': 'info',\n      'medium': '',\n      'high': 'warning',\n      'urgent': 'danger'\n    };\n    return priorityMap[priority] || '';\n  };\n\n  // 格式化工单状态\n  const formatOrderStatus = status => {\n    const statusMap = {\n      'pending': '待处理',\n      'processing': '处理中',\n      'completed': '已完成',\n      'cancelled': '已取消'\n    };\n    return statusMap[status] || status;\n  };\n\n  // 格式化工单类型\n  const formatOrderType = type => {\n    const typeMap = {\n      'repair': '维修',\n      'complaint': '投诉',\n      'suggestion': '建议',\n      'other': '其他'\n    };\n    return typeMap[type] || type;\n  };\n\n  // 格式化优先级\n  const formatPriority = priority => {\n    const priorityMap = {\n      'low': '低',\n      'medium': '中',\n      'high': '高',\n      'urgent': '紧急'\n    };\n    return priorityMap[priority] || priority;\n  };\n\n  // 格式化活动类型\n  const formatActivityType = type => {\n    const typeMap = {\n      'create': '创建工单',\n      'process': '处理工单',\n      'transfer': '转派工单',\n      'complete': '完成工单',\n      'cancel': '取消工单',\n      'update': '更新工单'\n    };\n    return typeMap[type] || type;\n  };\n\n  // 获取活动图标类型\n  const getActivityIconType = type => {\n    const typeMap = {\n      'create': 'primary',\n      'process': 'warning',\n      'transfer': 'info',\n      'complete': 'success',\n      'cancel': 'danger',\n      'update': 'info'\n    };\n    return typeMap[type] || 'info';\n  };\n\n  // 获取活动颜色\n  const getActivityColor = type => {\n    const colorMap = {\n      'create': '#409EFF',\n      'process': '#E6A23C',\n      'transfer': '#909399',\n      'complete': '#67C23A',\n      'cancel': '#F56C6C',\n      'update': '#909399'\n    };\n    return colorMap[type] || '#909399';\n  };\n\n  // 获取可用的状态选项\n  const getAvailableStatusOptions = currentStatus => {\n    const allOptions = [{\n      label: '待处理',\n      value: 'pending'\n    }, {\n      label: '处理中',\n      value: 'processing'\n    }, {\n      label: '已完成',\n      value: 'completed'\n    }, {\n      label: '已取消',\n      value: 'cancelled'\n    }];\n\n    // 根据当前状态过滤可用选项\n    return allOptions.filter(option => {\n      // 已完成和已取消状态不能再变更\n      if (currentStatus === 'completed' || currentStatus === 'cancelled') {\n        return false;\n      }\n\n      // 过滤掉当前状态\n      if (option.value === currentStatus) {\n        return false;\n      }\n      return true;\n    });\n  };\n\n  // 格式化日期\n  const formatDate = dateString => {\n    if (!dateString) return '';\n    return formatDateUtil(dateString, 'YYYY-MM-DD HH:mm:ss');\n  };\n\n  // 获取工单列表\n  const fetchWorkOrders = async () => {\n    loading.list = true;\n    try {\n      // 构建查询参数\n      const params = {\n        page: pagination.current,\n        pageSize: pagination.pageSize,\n        orderNumber: filterForm.orderNumber || undefined,\n        status: filterForm.status || undefined\n      };\n\n      // 日期范围\n      if (filterForm.dateRange && filterForm.dateRange.length === 2) {\n        params.startDate = filterForm.dateRange[0];\n        params.endDate = filterForm.dateRange[1];\n      }\n\n      // 调用API获取工单列表\n      const response = await fetch('/api/work-orders', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)\n      });\n      if (!response.ok) {\n        throw new Error('获取工单列表失败');\n      }\n      const data = await response.json();\n\n      // 更新数据\n      workOrders.value = data.items || [];\n      pagination.total = data.total || 0;\n    } catch (error) {\n      ElMessage.error(error.message || '获取工单列表失败');\n      console.error('获取工单列表错误:', error);\n    } finally {\n      loading.list = false;\n    }\n  };\n\n  // 刷新工单列表\n  const refreshOrders = () => {\n    fetchWorkOrders();\n  };\n\n  // 搜索工单\n  const handleSearch = () => {\n    pagination.current = 1;\n    fetchWorkOrders();\n  };\n\n  // 重置搜索条件\n  const resetSearch = () => {\n    // 重置表单\n    filterForm.orderNumber = '';\n    filterForm.status = '';\n    filterForm.dateRange = [];\n\n    // 重置分页并获取数据\n    pagination.current = 1;\n    fetchWorkOrders();\n  };\n\n  // 分页大小变更\n  const handleSizeChange = size => {\n    pagination.pageSize = size;\n    fetchWorkOrders();\n  };\n\n  // 当前页变更\n  const handleCurrentChange = page => {\n    pagination.current = page;\n    fetchWorkOrders();\n  };\n\n  // 查看工单详情\n  const viewOrderDetail = async orderId => {\n    loading.detail = true;\n    try {\n      // 调用API获取工单详情\n      const response = await fetch(`/api/work-orders/${orderId}`);\n      if (!response.ok) {\n        throw new Error('获取工单详情失败');\n      }\n      const data = await response.json();\n\n      // 更新当前工单\n      currentOrder.value = data;\n\n      // 显示详情对话框\n      dialogs.detail.visible = true;\n    } catch (error) {\n      ElMessage.error(error.message || '获取工单详情失败');\n      console.error('获取工单详情错误:', error);\n    } finally {\n      loading.detail = false;\n    }\n  };\n\n  // 创建工单\n  const handleCreateOrder = () => {\n    // 重置表单\n    Object.keys(orderForm).forEach(key => {\n      orderForm[key] = '';\n    });\n    orderForm.priority = 'medium';\n\n    // 设置对话框状态\n    dialogs.form.isEdit = false;\n    dialogs.form.visible = true;\n  };\n\n  // 更新工单\n  const handleUpdateOrder = order => {\n    // 填充表单\n    Object.keys(orderForm).forEach(key => {\n      if (key in order) {\n        orderForm[key] = order[key];\n      }\n    });\n\n    // 设置对话框状态\n    dialogs.form.isEdit = true;\n    dialogs.form.visible = true;\n  };\n\n  // 删除工单\n  const handleDeleteOrder = order => {\n    ElMessageBox.confirm(`确定要删除工单 \"${order.title}\" 吗？此操作不可逆。`, '删除确认', {\n      confirmButtonText: '确定',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }).then(async () => {\n      loading.delete = true;\n      try {\n        // 调用API删除工单\n        const response = await fetch(`/api/work-orders/${order.id}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n          throw new Error('删除工单失败');\n        }\n        ElMessage.success('工单删除成功');\n\n        // 刷新列表\n        fetchWorkOrders();\n      } catch (error) {\n        ElMessage.error(error.message || '删除工单失败');\n        console.error('删除工单错误:', error);\n      } finally {\n        loading.delete = false;\n      }\n    }).catch(() => {\n      // 用户取消删除操作\n    });\n  };\n\n  // 提交工单表单\n  const submitOrderForm = () => {\n    orderFormRef.value.validate(async valid => {\n      if (!valid) return;\n      loading.submit = true;\n      try {\n        const isEdit = dialogs.form.isEdit;\n        const method = isEdit ? 'PUT' : 'POST';\n        const url = isEdit ? `/api/work-orders/${orderForm.id}` : '/api/work-orders';\n\n        // 调用API提交工单\n        const response = await fetch(url, {\n          method,\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(orderForm)\n        });\n        if (!response.ok) {\n          throw new Error(isEdit ? '更新工单失败' : '创建工单失败');\n        }\n        ElMessage.success(isEdit ? '工单更新成功' : '工单创建成功');\n\n        // 关闭对话框并刷新列表\n        dialogs.form.visible = false;\n        fetchWorkOrders();\n      } catch (error) {\n        ElMessage.error(error.message || (dialogs.form.isEdit ? '更新工单失败' : '创建工单失败'));\n        console.error('提交工单表单错误:', error);\n      } finally {\n        loading.submit = false;\n      }\n    });\n  };\n\n  // 显示状态变更对话框\n  const showStatusChangeDialog = order => {\n    // 设置当前工单\n    dialogs.status.order = order;\n\n    // 重置状态表单\n    statusForm.status = '';\n    statusForm.remark = '';\n\n    // 显示对话框\n    dialogs.status.visible = true;\n  };\n\n  // 提交状态变更\n  const submitStatusChange = async () => {\n    // 表单验证\n    if (!statusForm.status) {\n      ElMessage.warning('请选择新状态');\n      return;\n    }\n    if (!statusForm.remark) {\n      ElMessage.warning('请填写变更原因');\n      return;\n    }\n    loading.status = true;\n    try {\n      const orderId = dialogs.status.order.id;\n\n      // 调用API更新工单状态\n      const response = await fetch(`/api/work-orders/${orderId}/status`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status: statusForm.status,\n          remark: statusForm.remark\n        })\n      });\n      if (!response.ok) {\n        throw new Error('更新工单状态失败');\n      }\n      ElMessage.success('工单状态更新成功');\n\n      // 关闭对话框并刷新列表\n      dialogs.status.visible = false;\n      fetchWorkOrders();\n\n      // 如果当前正在查看该工单的详情，也更新详情\n      if (currentOrder.value && currentOrder.value.id === orderId) {\n        viewOrderDetail(orderId);\n      }\n    } catch (error) {\n      ElMessage.error(error.message || '更新工单状态失败');\n      console.error('更新工单状态错误:', error);\n    } finally {\n      loading.status = false;\n    }\n  };\n\n  // 提交处理记录\n  const submitActivity = async () => {\n    // 表单验证\n    if (!activityForm.type) {\n      ElMessage.warning('请选择处理类型');\n      return;\n    }\n    if (!activityForm.remark) {\n      ElMessage.warning('请填写处理说明');\n      return;\n    }\n    loading.activity = true;\n    try {\n      const orderId = currentOrder.value.id;\n\n      // 调用API添加处理记录\n      const response = await fetch(`/api/work-orders/${orderId}/activities`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(activityForm)\n      });\n      if (!response.ok) {\n        throw new Error('添加处理记录失败');\n      }\n      ElMessage.success('处理记录添加成功');\n\n      // 清空表单\n      activityForm.remark = '';\n\n      // 刷新工单详情\n      viewOrderDetail(orderId);\n    } catch (error) {\n      ElMessage.error(error.message || '添加处理记录失败');\n      console.error('添加处理记录错误:', error);\n    } finally {\n      loading.activity = false;\n    }\n  };\n\n  // 生命周期钩子\n  onMounted(() => {\n    // 初始化获取工单列表\n    fetchWorkOrders();\n  });\n  return {\n    // 数据\n    workOrders,\n    currentOrder,\n    tableHeight,\n    pagination,\n    loading,\n    filterForm,\n    dateShortcuts,\n    dialogs,\n    orderFormRef,\n    orderForm,\n    orderFormRules,\n    activityForm,\n    statusForm,\n    // 方法\n    getStatusTagType,\n    getTypeTagType,\n    getPriorityTagType,\n    formatOrderStatus,\n    formatOrderType,\n    formatPriority,\n    formatActivityType,\n    getActivityIconType,\n    getActivityColor,\n    getAvailableStatusOptions,\n    formatDate,\n    fetchWorkOrders,\n    refreshOrders,\n    handleSearch,\n    resetSearch,\n    handleSizeChange,\n    handleCurrentChange,\n    viewOrderDetail,\n    handleCreateOrder,\n    handleUpdateOrder,\n    handleDeleteOrder,\n    submitOrderForm,\n    showStatusChangeDialog,\n    submitStatusChange,\n    submitActivity\n  };\n}","map":{"version":3,"names":["ref","reactive","computed","onMounted","watch","useRouter","ElMessage","ElMessageBox","formatDate","formatDateUtil","useWorkOrder","router","workOrders","currentOrder","tableHeight","pagination","current","pageSize","total","loading","list","detail","submit","activity","status","delete","filterForm","orderNumber","dateRange","dateShortcuts","text","value","end","Date","start","setTime","getTime","dialogs","visible","form","isEdit","order","orderFormRef","orderForm","id","title","type","priority","ownerName","contactPhone","address","description","orderFormRules","required","message","trigger","min","max","pattern","activityForm","remark","statusForm","getStatusTagType","statusMap","getTypeTagType","typeMap","getPriorityTagType","priorityMap","formatOrderStatus","formatOrderType","formatPriority","formatActivityType","getActivityIconType","getActivityColor","colorMap","getAvailableStatusOptions","currentStatus","allOptions","label","filter","option","dateString","fetchWorkOrders","params","page","undefined","length","startDate","endDate","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","items","error","console","refreshOrders","handleSearch","resetSearch","handleSizeChange","size","handleCurrentChange","viewOrderDetail","orderId","handleCreateOrder","Object","keys","forEach","key","handleUpdateOrder","handleDeleteOrder","confirm","confirmButtonText","cancelButtonText","then","success","catch","submitOrderForm","validate","valid","url","showStatusChangeDialog","submitStatusChange","warning","submitActivity"],"sources":["D:/admin-system/src/views/WorkOrder/workOrder.js"],"sourcesContent":["// 导入所需依赖\r\nimport { ref, reactive, computed, onMounted, watch } from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\nimport { formatDate as formatDateUtil } from '@/utils/formatter'\r\n\r\nexport default function useWorkOrder() {\r\n  const router = useRouter()\r\n\r\n  // 响应式数据\r\n  const workOrders = ref([])\r\n  const currentOrder = ref(null)\r\n  const tableHeight = ref('calc(100vh - 300px)')\r\n  \r\n  // 分页信息\r\n  const pagination = reactive({\r\n    current: 1,\r\n    pageSize: 10,\r\n    total: 0\r\n  })\r\n\r\n  // 加载状态\r\n  const loading = reactive({\r\n    list: false,\r\n    detail: false,\r\n    submit: false,\r\n    activity: false,\r\n    status: false,\r\n    delete: false\r\n  })\r\n\r\n  // 筛选表单\r\n  const filterForm = reactive({\r\n    orderNumber: '',\r\n    status: '',\r\n    dateRange: []\r\n  })\r\n\r\n  // 日期快捷选项\r\n  const dateShortcuts = [\r\n    {\r\n      text: '最近一周',\r\n      value: () => {\r\n        const end = new Date()\r\n        const start = new Date()\r\n        start.setTime(start.getTime() - 3600 * 1000 * 24 * 7)\r\n        return [start, end]\r\n      }\r\n    },\r\n    {\r\n      text: '最近一个月',\r\n      value: () => {\r\n        const end = new Date()\r\n        const start = new Date()\r\n        start.setTime(start.getTime() - 3600 * 1000 * 24 * 30)\r\n        return [start, end]\r\n      }\r\n    },\r\n    {\r\n      text: '最近三个月',\r\n      value: () => {\r\n        const end = new Date()\r\n        const start = new Date()\r\n        start.setTime(start.getTime() - 3600 * 1000 * 24 * 90)\r\n        return [start, end]\r\n      }\r\n    }\r\n  ]\r\n\r\n  // 对话框状态\r\n  const dialogs = reactive({\r\n    detail: {\r\n      visible: false\r\n    },\r\n    form: {\r\n      visible: false,\r\n      isEdit: false\r\n    },\r\n    status: {\r\n      visible: false,\r\n      order: null\r\n    }\r\n  })\r\n\r\n  // 工单表单\r\n  const orderFormRef = ref(null)\r\n  const orderForm = reactive({\r\n    id: '',\r\n    title: '',\r\n    type: '',\r\n    priority: 'medium',\r\n    ownerName: '',\r\n    contactPhone: '',\r\n    address: '',\r\n    description: ''\r\n  })\r\n\r\n  // 工单表单验证规则\r\n  const orderFormRules = {\r\n    title: [\r\n      { required: true, message: '请输入工单标题', trigger: 'blur' },\r\n      { min: 3, max: 50, message: '长度在 3 到 50 个字符', trigger: 'blur' }\r\n    ],\r\n    type: [\r\n      { required: true, message: '请选择工单类型', trigger: 'change' }\r\n    ],\r\n    priority: [\r\n      { required: true, message: '请选择优先级', trigger: 'change' }\r\n    ],\r\n    ownerName: [\r\n      { required: true, message: '请输入业主姓名', trigger: 'blur' }\r\n    ],\r\n    contactPhone: [\r\n      { required: true, message: '请输入联系电话', trigger: 'blur' },\r\n      { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号码', trigger: 'blur' }\r\n    ],\r\n    address: [\r\n      { required: true, message: '请输入地址', trigger: 'blur' }\r\n    ],\r\n    description: [\r\n      { required: true, message: '请输入工单描述', trigger: 'blur' },\r\n      { min: 10, max: 500, message: '长度在 10 到 500 个字符', trigger: 'blur' }\r\n    ]\r\n  }\r\n\r\n  // 活动记录表单\r\n  const activityForm = reactive({\r\n    type: 'process',\r\n    remark: ''\r\n  })\r\n\r\n  // 状态变更表单\r\n  const statusForm = reactive({\r\n    status: '',\r\n    remark: ''\r\n  })\r\n\r\n  // 计算属性：状态颜色映射\r\n  const getStatusTagType = (status) => {\r\n    const statusMap = {\r\n      'pending': 'info',\r\n      'processing': 'warning',\r\n      'completed': 'success',\r\n      'cancelled': 'danger'\r\n    }\r\n    return statusMap[status] || 'info'\r\n  }\r\n\r\n  // 计算属性：类型颜色映射\r\n  const getTypeTagType = (type) => {\r\n    const typeMap = {\r\n      'repair': 'danger',\r\n      'complaint': 'warning',\r\n      'suggestion': 'info',\r\n      'other': ''\r\n    }\r\n    return typeMap[type] || ''\r\n  }\r\n\r\n  // 计算属性：优先级颜色映射\r\n  const getPriorityTagType = (priority) => {\r\n    const priorityMap = {\r\n      'low': 'info',\r\n      'medium': '',\r\n      'high': 'warning',\r\n      'urgent': 'danger'\r\n    }\r\n    return priorityMap[priority] || ''\r\n  }\r\n\r\n  // 格式化工单状态\r\n  const formatOrderStatus = (status) => {\r\n    const statusMap = {\r\n      'pending': '待处理',\r\n      'processing': '处理中',\r\n      'completed': '已完成',\r\n      'cancelled': '已取消'\r\n    }\r\n    return statusMap[status] || status\r\n  }\r\n\r\n  // 格式化工单类型\r\n  const formatOrderType = (type) => {\r\n    const typeMap = {\r\n      'repair': '维修',\r\n      'complaint': '投诉',\r\n      'suggestion': '建议',\r\n      'other': '其他'\r\n    }\r\n    return typeMap[type] || type\r\n  }\r\n\r\n  // 格式化优先级\r\n  const formatPriority = (priority) => {\r\n    const priorityMap = {\r\n      'low': '低',\r\n      'medium': '中',\r\n      'high': '高',\r\n      'urgent': '紧急'\r\n    }\r\n    return priorityMap[priority] || priority\r\n  }\r\n\r\n  // 格式化活动类型\r\n  const formatActivityType = (type) => {\r\n    const typeMap = {\r\n      'create': '创建工单',\r\n      'process': '处理工单',\r\n      'transfer': '转派工单',\r\n      'complete': '完成工单',\r\n      'cancel': '取消工单',\r\n      'update': '更新工单'\r\n    }\r\n    return typeMap[type] || type\r\n  }\r\n\r\n  // 获取活动图标类型\r\n  const getActivityIconType = (type) => {\r\n    const typeMap = {\r\n      'create': 'primary',\r\n      'process': 'warning',\r\n      'transfer': 'info',\r\n      'complete': 'success',\r\n      'cancel': 'danger',\r\n      'update': 'info'\r\n    }\r\n    return typeMap[type] || 'info'\r\n  }\r\n\r\n  // 获取活动颜色\r\n  const getActivityColor = (type) => {\r\n    const colorMap = {\r\n      'create': '#409EFF',\r\n      'process': '#E6A23C',\r\n      'transfer': '#909399',\r\n      'complete': '#67C23A',\r\n      'cancel': '#F56C6C',\r\n      'update': '#909399'\r\n    }\r\n    return colorMap[type] || '#909399'\r\n  }\r\n\r\n  // 获取可用的状态选项\r\n  const getAvailableStatusOptions = (currentStatus) => {\r\n    const allOptions = [\r\n      { label: '待处理', value: 'pending' },\r\n      { label: '处理中', value: 'processing' },\r\n      { label: '已完成', value: 'completed' },\r\n      { label: '已取消', value: 'cancelled' }\r\n    ]\r\n    \r\n    // 根据当前状态过滤可用选项\r\n    return allOptions.filter(option => {\r\n      // 已完成和已取消状态不能再变更\r\n      if (currentStatus === 'completed' || currentStatus === 'cancelled') {\r\n        return false\r\n      }\r\n      \r\n      // 过滤掉当前状态\r\n      if (option.value === currentStatus) {\r\n        return false\r\n      }\r\n      \r\n      return true\r\n    })\r\n  }\r\n\r\n  // 格式化日期\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return ''\r\n    return formatDateUtil(dateString, 'YYYY-MM-DD HH:mm:ss')\r\n  }\r\n\r\n  // 获取工单列表\r\n  const fetchWorkOrders = async () => {\r\n    loading.list = true\r\n    try {\r\n      // 构建查询参数\r\n      const params = {\r\n        page: pagination.current,\r\n        pageSize: pagination.pageSize,\r\n        orderNumber: filterForm.orderNumber || undefined,\r\n        status: filterForm.status || undefined\r\n      }\r\n\r\n      // 日期范围\r\n      if (filterForm.dateRange && filterForm.dateRange.length === 2) {\r\n        params.startDate = filterForm.dateRange[0]\r\n        params.endDate = filterForm.dateRange[1]\r\n      }\r\n\r\n      // 调用API获取工单列表\r\n      const response = await fetch('/api/work-orders', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(params)\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error('获取工单列表失败')\r\n      }\r\n\r\n      const data = await response.json()\r\n      \r\n      // 更新数据\r\n      workOrders.value = data.items || []\r\n      pagination.total = data.total || 0\r\n    } catch (error) {\r\n      ElMessage.error(error.message || '获取工单列表失败')\r\n      console.error('获取工单列表错误:', error)\r\n    } finally {\r\n      loading.list = false\r\n    }\r\n  }\r\n\r\n  // 刷新工单列表\r\n  const refreshOrders = () => {\r\n    fetchWorkOrders()\r\n  }\r\n\r\n  // 搜索工单\r\n  const handleSearch = () => {\r\n    pagination.current = 1\r\n    fetchWorkOrders()\r\n  }\r\n\r\n  // 重置搜索条件\r\n  const resetSearch = () => {\r\n    // 重置表单\r\n    filterForm.orderNumber = ''\r\n    filterForm.status = ''\r\n    filterForm.dateRange = []\r\n    \r\n    // 重置分页并获取数据\r\n    pagination.current = 1\r\n    fetchWorkOrders()\r\n  }\r\n\r\n  // 分页大小变更\r\n  const handleSizeChange = (size) => {\r\n    pagination.pageSize = size\r\n    fetchWorkOrders()\r\n  }\r\n\r\n  // 当前页变更\r\n  const handleCurrentChange = (page) => {\r\n    pagination.current = page\r\n    fetchWorkOrders()\r\n  }\r\n\r\n  // 查看工单详情\r\n  const viewOrderDetail = async (orderId) => {\r\n    loading.detail = true\r\n    try {\r\n      // 调用API获取工单详情\r\n      const response = await fetch(`/api/work-orders/${orderId}`)\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('获取工单详情失败')\r\n      }\r\n\r\n      const data = await response.json()\r\n      \r\n      // 更新当前工单\r\n      currentOrder.value = data\r\n      \r\n      // 显示详情对话框\r\n      dialogs.detail.visible = true\r\n    } catch (error) {\r\n      ElMessage.error(error.message || '获取工单详情失败')\r\n      console.error('获取工单详情错误:', error)\r\n    } finally {\r\n      loading.detail = false\r\n    }\r\n  }\r\n\r\n  // 创建工单\r\n  const handleCreateOrder = () => {\r\n    // 重置表单\r\n    Object.keys(orderForm).forEach(key => {\r\n      orderForm[key] = ''\r\n    })\r\n    orderForm.priority = 'medium'\r\n    \r\n    // 设置对话框状态\r\n    dialogs.form.isEdit = false\r\n    dialogs.form.visible = true\r\n  }\r\n\r\n  // 更新工单\r\n  const handleUpdateOrder = (order) => {\r\n    // 填充表单\r\n    Object.keys(orderForm).forEach(key => {\r\n      if (key in order) {\r\n        orderForm[key] = order[key]\r\n      }\r\n    })\r\n    \r\n    // 设置对话框状态\r\n    dialogs.form.isEdit = true\r\n    dialogs.form.visible = true\r\n  }\r\n\r\n  // 删除工单\r\n  const handleDeleteOrder = (order) => {\r\n    ElMessageBox.confirm(\r\n      `确定要删除工单 \"${order.title}\" 吗？此操作不可逆。`,\r\n      '删除确认',\r\n      {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }\r\n    ).then(async () => {\r\n      loading.delete = true\r\n      try {\r\n        // 调用API删除工单\r\n        const response = await fetch(`/api/work-orders/${order.id}`, {\r\n          method: 'DELETE'\r\n        })\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('删除工单失败')\r\n        }\r\n        \r\n        ElMessage.success('工单删除成功')\r\n        \r\n        // 刷新列表\r\n        fetchWorkOrders()\r\n      } catch (error) {\r\n        ElMessage.error(error.message || '删除工单失败')\r\n        console.error('删除工单错误:', error)\r\n      } finally {\r\n        loading.delete = false\r\n      }\r\n    }).catch(() => {\r\n      // 用户取消删除操作\r\n    })\r\n  }\r\n\r\n  // 提交工单表单\r\n  const submitOrderForm = () => {\r\n    orderFormRef.value.validate(async (valid) => {\r\n      if (!valid) return\r\n      \r\n      loading.submit = true\r\n      try {\r\n        const isEdit = dialogs.form.isEdit\r\n        const method = isEdit ? 'PUT' : 'POST'\r\n        const url = isEdit ? `/api/work-orders/${orderForm.id}` : '/api/work-orders'\r\n        \r\n        // 调用API提交工单\r\n        const response = await fetch(url, {\r\n          method,\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(orderForm)\r\n        })\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(isEdit ? '更新工单失败' : '创建工单失败')\r\n        }\r\n        \r\n        ElMessage.success(isEdit ? '工单更新成功' : '工单创建成功')\r\n        \r\n        // 关闭对话框并刷新列表\r\n        dialogs.form.visible = false\r\n        fetchWorkOrders()\r\n      } catch (error) {\r\n        ElMessage.error(error.message || (dialogs.form.isEdit ? '更新工单失败' : '创建工单失败'))\r\n        console.error('提交工单表单错误:', error)\r\n      } finally {\r\n        loading.submit = false\r\n      }\r\n    })\r\n  }\r\n\r\n  // 显示状态变更对话框\r\n  const showStatusChangeDialog = (order) => {\r\n    // 设置当前工单\r\n    dialogs.status.order = order\r\n    \r\n    // 重置状态表单\r\n    statusForm.status = ''\r\n    statusForm.remark = ''\r\n    \r\n    // 显示对话框\r\n    dialogs.status.visible = true\r\n  }\r\n\r\n  // 提交状态变更\r\n  const submitStatusChange = async () => {\r\n    // 表单验证\r\n    if (!statusForm.status) {\r\n      ElMessage.warning('请选择新状态')\r\n      return\r\n    }\r\n    \r\n    if (!statusForm.remark) {\r\n      ElMessage.warning('请填写变更原因')\r\n      return\r\n    }\r\n    \r\n    loading.status = true\r\n    try {\r\n      const orderId = dialogs.status.order.id\r\n      \r\n      // 调用API更新工单状态\r\n      const response = await fetch(`/api/work-orders/${orderId}/status`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          status: statusForm.status,\r\n          remark: statusForm.remark\r\n        })\r\n      })\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('更新工单状态失败')\r\n      }\r\n      \r\n      ElMessage.success('工单状态更新成功')\r\n      \r\n      // 关闭对话框并刷新列表\r\n      dialogs.status.visible = false\r\n      fetchWorkOrders()\r\n      \r\n      // 如果当前正在查看该工单的详情，也更新详情\r\n      if (currentOrder.value && currentOrder.value.id === orderId) {\r\n        viewOrderDetail(orderId)\r\n      }\r\n    } catch (error) {\r\n      ElMessage.error(error.message || '更新工单状态失败')\r\n      console.error('更新工单状态错误:', error)\r\n    } finally {\r\n      loading.status = false\r\n    }\r\n  }\r\n\r\n  // 提交处理记录\r\n  const submitActivity = async () => {\r\n    // 表单验证\r\n    if (!activityForm.type) {\r\n      ElMessage.warning('请选择处理类型')\r\n      return\r\n    }\r\n    \r\n    if (!activityForm.remark) {\r\n      ElMessage.warning('请填写处理说明')\r\n      return\r\n    }\r\n    \r\n    loading.activity = true\r\n    try {\r\n      const orderId = currentOrder.value.id\r\n      \r\n      // 调用API添加处理记录\r\n      const response = await fetch(`/api/work-orders/${orderId}/activities`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(activityForm)\r\n      })\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('添加处理记录失败')\r\n      }\r\n      \r\n      ElMessage.success('处理记录添加成功')\r\n      \r\n      // 清空表单\r\n      activityForm.remark = ''\r\n      \r\n      // 刷新工单详情\r\n      viewOrderDetail(orderId)\r\n    } catch (error) {\r\n      ElMessage.error(error.message || '添加处理记录失败')\r\n      console.error('添加处理记录错误:', error)\r\n    } finally {\r\n      loading.activity = false\r\n    }\r\n  }\r\n\r\n  // 生命周期钩子\r\n  onMounted(() => {\r\n    // 初始化获取工单列表\r\n    fetchWorkOrders()\r\n  })\r\n\r\n  return {\r\n    // 数据\r\n    workOrders,\r\n    currentOrder,\r\n    tableHeight,\r\n    pagination,\r\n    loading,\r\n    filterForm,\r\n    dateShortcuts,\r\n    dialogs,\r\n    orderFormRef,\r\n    orderForm,\r\n    orderFormRules,\r\n    activityForm,\r\n    statusForm,\r\n    \r\n    // 方法\r\n    getStatusTagType,\r\n    getTypeTagType,\r\n    getPriorityTagType,\r\n    formatOrderStatus,\r\n    formatOrderType,\r\n    formatPriority,\r\n    formatActivityType,\r\n    getActivityIconType,\r\n    getActivityColor,\r\n    getAvailableStatusOptions,\r\n    formatDate,\r\n    fetchWorkOrders,\r\n    refreshOrders,\r\n    handleSearch,\r\n    resetSearch,\r\n    handleSizeChange,\r\n    handleCurrentChange,\r\n    viewOrderDetail,\r\n    handleCreateOrder,\r\n    handleUpdateOrder,\r\n    handleDeleteOrder,\r\n    submitOrderForm,\r\n    showStatusChangeDialog,\r\n    submitStatusChange,\r\n    submitActivity\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}