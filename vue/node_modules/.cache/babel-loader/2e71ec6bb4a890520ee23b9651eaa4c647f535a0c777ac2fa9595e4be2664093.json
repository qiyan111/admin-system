{"ast":null,"code":"/**\r\n * 格式化日期为指定格式的字符串\r\n * @param {string|Date} date 日期对象或日期字符串\r\n * @param {string} format 格式化模板，例如 YYYY-MM-DD HH:mm:ss\r\n * @returns {string} 格式化后的日期字符串\r\n */\nexport function formatDate(date, format = 'YYYY-MM-DD') {\n  if (!date) return '';\n  const d = typeof date === 'string' ? new Date(date) : date;\n  if (isNaN(d.getTime())) {\n    console.warn('Invalid date:', date);\n    return '';\n  }\n  const year = d.getFullYear();\n  const month = d.getMonth() + 1;\n  const day = d.getDate();\n  const hour = d.getHours();\n  const minute = d.getMinutes();\n  const second = d.getSeconds();\n  const padZero = num => num < 10 ? '0' + num : num;\n  const formatMap = {\n    'YYYY': year,\n    'MM': padZero(month),\n    'DD': padZero(day),\n    'HH': padZero(hour),\n    'mm': padZero(minute),\n    'ss': padZero(second)\n  };\n  let result = format;\n  for (const key in formatMap) {\n    result = result.replace(key, formatMap[key]);\n  }\n  return result;\n}\n\n/**\r\n * 将时间戳或日期对象转换为 \"X天X小时前\" 的相对时间描述\r\n * @param {string|Date} date 日期对象或日期字符串\r\n * @returns {string} 相对时间描述\r\n */\nexport function formatRelativeTime(date) {\n  if (!date) return '';\n  const d = typeof date === 'string' ? new Date(date) : date;\n  if (isNaN(d.getTime())) {\n    console.warn('Invalid date:', date);\n    return '';\n  }\n  const now = new Date();\n  const diff = now.getTime() - d.getTime();\n\n  // 转换为秒\n  const seconds = Math.floor(diff / 1000);\n  if (seconds < 60) {\n    return '刚刚';\n  }\n\n  // 转换为分钟\n  const minutes = Math.floor(seconds / 60);\n  if (minutes < 60) {\n    return `${minutes}分钟前`;\n  }\n\n  // 转换为小时\n  const hours = Math.floor(minutes / 60);\n  if (hours < 24) {\n    return `${hours}小时前`;\n  }\n\n  // 转换为天\n  const days = Math.floor(hours / 24);\n  if (days < 30) {\n    return `${days}天前`;\n  }\n\n  // 转换为月\n  const months = Math.floor(days / 30);\n  if (months < 12) {\n    return `${months}个月前`;\n  }\n\n  // 转换为年\n  const years = Math.floor(months / 12);\n  return `${years}年前`;\n}\n\n/**\r\n * 格式化金额，添加千位分隔符\r\n * @param {number} amount 金额\r\n * @param {number} decimals 小数位数\r\n * @param {string} decimalSeparator 小数分隔符\r\n * @param {string} thousandsSeparator 千位分隔符\r\n * @returns {string} 格式化后的金额字符串\r\n */\nexport function formatCurrency(amount, decimals = 2, decimalSeparator = '.', thousandsSeparator = ',') {\n  if (amount === null || amount === undefined) return '';\n  const fixedAmount = parseFloat(amount).toFixed(decimals);\n  const [integerPart, decimalPart] = fixedAmount.split('.');\n\n  // 添加千位分隔符\n  const formattedIntegerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandsSeparator);\n  return decimals > 0 ? `${formattedIntegerPart}${decimalSeparator}${decimalPart}` : formattedIntegerPart;\n}\n\n/**\r\n * 格式化文件大小\r\n * @param {number} bytes 字节数\r\n * @param {number} decimals 小数位数\r\n * @returns {string} 格式化后的文件大小字符串\r\n */\nexport function formatFileSize(bytes, decimals = 2) {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];\n}","map":{"version":3,"names":["formatDate","date","format","d","Date","isNaN","getTime","console","warn","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","padZero","num","formatMap","result","key","replace","formatRelativeTime","now","diff","seconds","Math","floor","minutes","hours","days","months","years","formatCurrency","amount","decimals","decimalSeparator","thousandsSeparator","undefined","fixedAmount","parseFloat","toFixed","integerPart","decimalPart","split","formattedIntegerPart","formatFileSize","bytes","k","sizes","i","log","pow"],"sources":["D:/admin-system/src/utils/formatter.js"],"sourcesContent":["/**\r\n * 格式化日期为指定格式的字符串\r\n * @param {string|Date} date 日期对象或日期字符串\r\n * @param {string} format 格式化模板，例如 YYYY-MM-DD HH:mm:ss\r\n * @returns {string} 格式化后的日期字符串\r\n */\r\nexport function formatDate(date, format = 'YYYY-MM-DD') {\r\n  if (!date) return '';\r\n  \r\n  const d = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  if (isNaN(d.getTime())) {\r\n    console.warn('Invalid date:', date);\r\n    return '';\r\n  }\r\n  \r\n  const year = d.getFullYear();\r\n  const month = d.getMonth() + 1;\r\n  const day = d.getDate();\r\n  const hour = d.getHours();\r\n  const minute = d.getMinutes();\r\n  const second = d.getSeconds();\r\n  \r\n  const padZero = (num) => (num < 10 ? '0' + num : num);\r\n  \r\n  const formatMap = {\r\n    'YYYY': year,\r\n    'MM': padZero(month),\r\n    'DD': padZero(day),\r\n    'HH': padZero(hour),\r\n    'mm': padZero(minute),\r\n    'ss': padZero(second)\r\n  };\r\n  \r\n  let result = format;\r\n  for (const key in formatMap) {\r\n    result = result.replace(key, formatMap[key]);\r\n  }\r\n  \r\n  return result;\r\n}\r\n\r\n/**\r\n * 将时间戳或日期对象转换为 \"X天X小时前\" 的相对时间描述\r\n * @param {string|Date} date 日期对象或日期字符串\r\n * @returns {string} 相对时间描述\r\n */\r\nexport function formatRelativeTime(date) {\r\n  if (!date) return '';\r\n  \r\n  const d = typeof date === 'string' ? new Date(date) : date;\r\n  \r\n  if (isNaN(d.getTime())) {\r\n    console.warn('Invalid date:', date);\r\n    return '';\r\n  }\r\n  \r\n  const now = new Date();\r\n  const diff = now.getTime() - d.getTime();\r\n  \r\n  // 转换为秒\r\n  const seconds = Math.floor(diff / 1000);\r\n  \r\n  if (seconds < 60) {\r\n    return '刚刚';\r\n  }\r\n  \r\n  // 转换为分钟\r\n  const minutes = Math.floor(seconds / 60);\r\n  \r\n  if (minutes < 60) {\r\n    return `${minutes}分钟前`;\r\n  }\r\n  \r\n  // 转换为小时\r\n  const hours = Math.floor(minutes / 60);\r\n  \r\n  if (hours < 24) {\r\n    return `${hours}小时前`;\r\n  }\r\n  \r\n  // 转换为天\r\n  const days = Math.floor(hours / 24);\r\n  \r\n  if (days < 30) {\r\n    return `${days}天前`;\r\n  }\r\n  \r\n  // 转换为月\r\n  const months = Math.floor(days / 30);\r\n  \r\n  if (months < 12) {\r\n    return `${months}个月前`;\r\n  }\r\n  \r\n  // 转换为年\r\n  const years = Math.floor(months / 12);\r\n  return `${years}年前`;\r\n}\r\n\r\n/**\r\n * 格式化金额，添加千位分隔符\r\n * @param {number} amount 金额\r\n * @param {number} decimals 小数位数\r\n * @param {string} decimalSeparator 小数分隔符\r\n * @param {string} thousandsSeparator 千位分隔符\r\n * @returns {string} 格式化后的金额字符串\r\n */\r\nexport function formatCurrency(amount, decimals = 2, decimalSeparator = '.', thousandsSeparator = ',') {\r\n  if (amount === null || amount === undefined) return '';\r\n  \r\n  const fixedAmount = parseFloat(amount).toFixed(decimals);\r\n  const [integerPart, decimalPart] = fixedAmount.split('.');\r\n  \r\n  // 添加千位分隔符\r\n  const formattedIntegerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandsSeparator);\r\n  \r\n  return decimals > 0 \r\n    ? `${formattedIntegerPart}${decimalSeparator}${decimalPart}` \r\n    : formattedIntegerPart;\r\n}\r\n\r\n/**\r\n * 格式化文件大小\r\n * @param {number} bytes 字节数\r\n * @param {number} decimals 小数位数\r\n * @returns {string} 格式化后的文件大小字符串\r\n */\r\nexport function formatFileSize(bytes, decimals = 2) {\r\n  if (bytes === 0) return '0 Bytes';\r\n  \r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];\r\n} "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,IAAI,EAAEC,MAAM,GAAG,YAAY,EAAE;EACtD,IAAI,CAACD,IAAI,EAAE,OAAO,EAAE;EAEpB,MAAME,CAAC,GAAG,OAAOF,IAAI,KAAK,QAAQ,GAAG,IAAIG,IAAI,CAACH,IAAI,CAAC,GAAGA,IAAI;EAE1D,IAAII,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;IACtBC,OAAO,CAACC,IAAI,CAAC,eAAe,EAAEP,IAAI,CAAC;IACnC,OAAO,EAAE;EACX;EAEA,MAAMQ,IAAI,GAAGN,CAAC,CAACO,WAAW,CAAC,CAAC;EAC5B,MAAMC,KAAK,GAAGR,CAAC,CAACS,QAAQ,CAAC,CAAC,GAAG,CAAC;EAC9B,MAAMC,GAAG,GAAGV,CAAC,CAACW,OAAO,CAAC,CAAC;EACvB,MAAMC,IAAI,GAAGZ,CAAC,CAACa,QAAQ,CAAC,CAAC;EACzB,MAAMC,MAAM,GAAGd,CAAC,CAACe,UAAU,CAAC,CAAC;EAC7B,MAAMC,MAAM,GAAGhB,CAAC,CAACiB,UAAU,CAAC,CAAC;EAE7B,MAAMC,OAAO,GAAIC,GAAG,IAAMA,GAAG,GAAG,EAAE,GAAG,GAAG,GAAGA,GAAG,GAAGA,GAAI;EAErD,MAAMC,SAAS,GAAG;IAChB,MAAM,EAAEd,IAAI;IACZ,IAAI,EAAEY,OAAO,CAACV,KAAK,CAAC;IACpB,IAAI,EAAEU,OAAO,CAACR,GAAG,CAAC;IAClB,IAAI,EAAEQ,OAAO,CAACN,IAAI,CAAC;IACnB,IAAI,EAAEM,OAAO,CAACJ,MAAM,CAAC;IACrB,IAAI,EAAEI,OAAO,CAACF,MAAM;EACtB,CAAC;EAED,IAAIK,MAAM,GAAGtB,MAAM;EACnB,KAAK,MAAMuB,GAAG,IAAIF,SAAS,EAAE;IAC3BC,MAAM,GAAGA,MAAM,CAACE,OAAO,CAACD,GAAG,EAAEF,SAAS,CAACE,GAAG,CAAC,CAAC;EAC9C;EAEA,OAAOD,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,kBAAkBA,CAAC1B,IAAI,EAAE;EACvC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EAEpB,MAAME,CAAC,GAAG,OAAOF,IAAI,KAAK,QAAQ,GAAG,IAAIG,IAAI,CAACH,IAAI,CAAC,GAAGA,IAAI;EAE1D,IAAII,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;IACtBC,OAAO,CAACC,IAAI,CAAC,eAAe,EAAEP,IAAI,CAAC;IACnC,OAAO,EAAE;EACX;EAEA,MAAM2B,GAAG,GAAG,IAAIxB,IAAI,CAAC,CAAC;EACtB,MAAMyB,IAAI,GAAGD,GAAG,CAACtB,OAAO,CAAC,CAAC,GAAGH,CAAC,CAACG,OAAO,CAAC,CAAC;;EAExC;EACA,MAAMwB,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,IAAI,CAAC;EAEvC,IAAIC,OAAO,GAAG,EAAE,EAAE;IAChB,OAAO,IAAI;EACb;;EAEA;EACA,MAAMG,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;EAExC,IAAIG,OAAO,GAAG,EAAE,EAAE;IAChB,OAAO,GAAGA,OAAO,KAAK;EACxB;;EAEA;EACA,MAAMC,KAAK,GAAGH,IAAI,CAACC,KAAK,CAACC,OAAO,GAAG,EAAE,CAAC;EAEtC,IAAIC,KAAK,GAAG,EAAE,EAAE;IACd,OAAO,GAAGA,KAAK,KAAK;EACtB;;EAEA;EACA,MAAMC,IAAI,GAAGJ,IAAI,CAACC,KAAK,CAACE,KAAK,GAAG,EAAE,CAAC;EAEnC,IAAIC,IAAI,GAAG,EAAE,EAAE;IACb,OAAO,GAAGA,IAAI,IAAI;EACpB;;EAEA;EACA,MAAMC,MAAM,GAAGL,IAAI,CAACC,KAAK,CAACG,IAAI,GAAG,EAAE,CAAC;EAEpC,IAAIC,MAAM,GAAG,EAAE,EAAE;IACf,OAAO,GAAGA,MAAM,KAAK;EACvB;;EAEA;EACA,MAAMC,KAAK,GAAGN,IAAI,CAACC,KAAK,CAACI,MAAM,GAAG,EAAE,CAAC;EACrC,OAAO,GAAGC,KAAK,IAAI;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,MAAM,EAAEC,QAAQ,GAAG,CAAC,EAAEC,gBAAgB,GAAG,GAAG,EAAEC,kBAAkB,GAAG,GAAG,EAAE;EACrG,IAAIH,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKI,SAAS,EAAE,OAAO,EAAE;EAEtD,MAAMC,WAAW,GAAGC,UAAU,CAACN,MAAM,CAAC,CAACO,OAAO,CAACN,QAAQ,CAAC;EACxD,MAAM,CAACO,WAAW,EAAEC,WAAW,CAAC,GAAGJ,WAAW,CAACK,KAAK,CAAC,GAAG,CAAC;;EAEzD;EACA,MAAMC,oBAAoB,GAAGH,WAAW,CAACrB,OAAO,CAAC,uBAAuB,EAAEgB,kBAAkB,CAAC;EAE7F,OAAOF,QAAQ,GAAG,CAAC,GACf,GAAGU,oBAAoB,GAAGT,gBAAgB,GAAGO,WAAW,EAAE,GAC1DE,oBAAoB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAEZ,QAAQ,GAAG,CAAC,EAAE;EAClD,IAAIY,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;EAEjC,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACrD,MAAMC,CAAC,GAAGxB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACyB,GAAG,CAACJ,KAAK,CAAC,GAAGrB,IAAI,CAACyB,GAAG,CAACH,CAAC,CAAC,CAAC;EAEnD,OAAOR,UAAU,CAAC,CAACO,KAAK,GAAGrB,IAAI,CAAC0B,GAAG,CAACJ,CAAC,EAAEE,CAAC,CAAC,EAAET,OAAO,CAACN,QAAQ,CAAC,CAAC,GAAG,GAAG,GAAGc,KAAK,CAACC,CAAC,CAAC;AAChF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}