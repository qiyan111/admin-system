{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\nexport default {\n  name: 'DoorMonitor',\n  data() {\n    return {\n      // 门禁状态相关\n      doorStatus: {\n        status: '未知',\n        lastUpdated: null\n      },\n      // 摄像头相关\n      cameraData: {\n        isPlaying: false,\n        stream: null,\n        snapshot: null\n      },\n      // 访问记录相关\n      accessRecords: [],\n      pagination: {\n        currentPage: 1,\n        pageSize: 10,\n        total: 0\n      },\n      // 控制加载状态\n      loading: {\n        doorStatus: false,\n        camera: false,\n        records: false\n      },\n      // 错误信息\n      error: {\n        doorStatus: null,\n        camera: null,\n        records: null\n      },\n      // 当前记录详情\n      currentRecord: null,\n      recordDetailVisible: false,\n      // 轮询定时器\n      pollingTimers: {\n        doorStatus: null\n      }\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.pagination.total / this.pagination.pageSize);\n    }\n  },\n  mounted() {\n    // 初始化获取数据\n    this.fetchDoorStatus();\n    this.fetchAccessRecords();\n\n    // 设置门禁状态轮询 (每30秒更新一次)\n    this.pollingTimers.doorStatus = setInterval(() => {\n      this.fetchDoorStatus();\n    }, 30000);\n  },\n  beforeUnmount() {\n    // 清除轮询定时器\n    if (this.pollingTimers.doorStatus) {\n      clearInterval(this.pollingTimers.doorStatus);\n    }\n\n    // 停止摄像头流\n    this.stopCameraStream();\n  },\n  methods: {\n    // 格式化时间\n    formatTime(timestamp) {\n      if (!timestamp) return '未知';\n      const date = new Date(timestamp);\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;\n    },\n    // 获取门禁状态\n    async fetchDoorStatus() {\n      if (this.loading.doorStatus) return;\n      this.loading.doorStatus = true;\n      this.error.doorStatus = null;\n      try {\n        // 调用API获取门禁状态\n        const response = await fetch('/api/door/status');\n        if (!response.ok) {\n          throw new Error(`获取门禁状态失败: ${response.status}`);\n        }\n        const data = await response.json();\n        this.doorStatus = {\n          status: data.isOpen ? '开启' : '关闭',\n          lastUpdated: data.lastUpdated || new Date().toISOString()\n        };\n      } catch (error) {\n        console.error('获取门禁状态失败:', error);\n        this.error.doorStatus = `获取门禁状态失败: ${error.message}`;\n        ElMessage.error(this.error.doorStatus);\n      } finally {\n        this.loading.doorStatus = false;\n      }\n    },\n    // 控制门禁\n    async controlDoor(action) {\n      if (this.loading.doorStatus) return;\n      const actionText = action === 'open' ? '开启' : '关闭';\n      const confirmMsg = `确定要${actionText}门禁吗？`;\n      try {\n        await ElMessageBox.confirm(confirmMsg, '操作确认', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        this.loading.doorStatus = true;\n        this.error.doorStatus = null;\n\n        // 调用API控制门禁\n        const response = await fetch('/api/door/control', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            action: action,\n            timestamp: new Date().toISOString()\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`${actionText}门禁失败: ${response.status}`);\n        }\n\n        // 更新门禁状态\n        this.doorStatus = {\n          status: action === 'open' ? '开启' : '关闭',\n          lastUpdated: new Date().toISOString()\n        };\n        ElMessage.success(`门禁已${actionText}`);\n      } catch (error) {\n        if (error === 'cancel') return;\n        console.error(`${actionText}门禁失败:`, error);\n        this.error.doorStatus = `${actionText}门禁失败: ${error.message}`;\n        ElMessage.error(this.error.doorStatus);\n      } finally {\n        this.loading.doorStatus = false;\n      }\n    },\n    // 获取摄像头数据\n    async fetchCameraData() {\n      if (this.loading.camera) return;\n      this.loading.camera = true;\n      this.error.camera = null;\n      try {\n        // 请求摄像头权限\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: false\n        });\n        this.cameraData.stream = stream;\n        this.cameraData.isPlaying = true;\n\n        // 延迟执行，确保DOM已更新\n        this.$nextTick(() => {\n          const videoElement = this.$refs.cameraVideo;\n          if (videoElement) {\n            videoElement.srcObject = stream;\n          }\n        });\n      } catch (error) {\n        console.error('获取摄像头数据失败:', error);\n        this.error.camera = `获取摄像头数据失败: ${error.message}`;\n        ElMessage.error(this.error.camera);\n      } finally {\n        this.loading.camera = false;\n      }\n    },\n    // 停止摄像头流\n    stopCameraStream() {\n      if (this.cameraData.stream) {\n        this.cameraData.stream.getTracks().forEach(track => track.stop());\n        this.cameraData.stream = null;\n      }\n      this.cameraData.isPlaying = false;\n    },\n    // 拍摄快照\n    takeSnapshot() {\n      if (!this.cameraData.isPlaying || !this.$refs.cameraVideo) return;\n      try {\n        const video = this.$refs.cameraVideo;\n        const canvas = document.createElement('canvas');\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n        // 获取图像数据\n        this.cameraData.snapshot = canvas.toDataURL('image/jpeg');\n\n        // 保存快照到服务器\n        this.saveSnapshotToServer(this.cameraData.snapshot);\n      } catch (error) {\n        console.error('拍摄快照失败:', error);\n        ElMessage.error(`拍摄快照失败: ${error.message}`);\n      }\n    },\n    // 保存快照到服务器\n    async saveSnapshotToServer(imageData) {\n      try {\n        const response = await fetch('/api/door/snapshot', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            imageData: imageData,\n            timestamp: new Date().toISOString()\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`保存快照失败: ${response.status}`);\n        }\n        ElMessage.success('快照已保存');\n\n        // 刷新访问记录\n        this.fetchAccessRecords();\n      } catch (error) {\n        console.error('保存快照失败:', error);\n        ElMessage.error(`保存快照失败: ${error.message}`);\n      }\n    },\n    // 获取访问记录\n    async fetchAccessRecords() {\n      if (this.loading.records) return;\n      this.loading.records = true;\n      this.error.records = null;\n      try {\n        // 调用API获取访问记录\n        const response = await fetch(`/api/door/access-records?page=${this.pagination.currentPage}&pageSize=${this.pagination.pageSize}`);\n        if (!response.ok) {\n          throw new Error(`获取访问记录失败: ${response.status}`);\n        }\n        const data = await response.json();\n        this.accessRecords = data.records || [];\n        this.pagination.total = data.total || 0;\n      } catch (error) {\n        console.error('获取访问记录失败:', error);\n        this.error.records = `获取访问记录失败: ${error.message}`;\n        ElMessage.error(this.error.records);\n      } finally {\n        this.loading.records = false;\n      }\n    },\n    // 处理分页变化\n    handlePageChange(page) {\n      this.pagination.currentPage = page;\n      this.fetchAccessRecords();\n    },\n    // 查看记录详情\n    async viewRecordDetail(recordId) {\n      try {\n        // 调用API获取记录详情\n        const response = await fetch(`/api/door/access-records/${recordId}`);\n        if (!response.ok) {\n          throw new Error(`获取记录详情失败: ${response.status}`);\n        }\n        const data = await response.json();\n        this.currentRecord = data;\n        this.recordDetailVisible = true;\n      } catch (error) {\n        console.error('获取记录详情失败:', error);\n        ElMessage.error(`获取记录详情失败: ${error.message}`);\n      }\n    },\n    // 查看记录图片\n    async viewRecordImage(recordId) {\n      try {\n        // 调用API获取记录图片\n        const response = await fetch(`/api/door/access-records/${recordId}/image`);\n        if (!response.ok) {\n          throw new Error(`获取记录图片失败: ${response.status}`);\n        }\n        const data = await response.json();\n        if (!data.imageUrl) {\n          throw new Error('没有可用的图片');\n        }\n\n        // 打开图片预览\n        this.currentRecord = {\n          id: recordId,\n          hasImage: true,\n          imageUrl: data.imageUrl\n        };\n        this.recordDetailVisible = true;\n      } catch (error) {\n        console.error('获取记录图片失败:', error);\n        ElMessage.error(`获取记录图片失败: ${error.message}`);\n      }\n    },\n    // 关闭记录详情对话框\n    closeRecordDetail() {\n      this.recordDetailVisible = false;\n      this.currentRecord = null;\n    }\n  }\n};","map":{"version":3,"names":["ElMessage","ElMessageBox","ref","onMounted","onBeforeUnmount","name","data","doorStatus","status","lastUpdated","cameraData","isPlaying","stream","snapshot","accessRecords","pagination","currentPage","pageSize","total","loading","camera","records","error","currentRecord","recordDetailVisible","pollingTimers","computed","totalPages","Math","ceil","mounted","fetchDoorStatus","fetchAccessRecords","setInterval","beforeUnmount","clearInterval","stopCameraStream","methods","formatTime","timestamp","date","Date","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","getSeconds","response","fetch","ok","Error","json","isOpen","toISOString","console","message","controlDoor","action","actionText","confirmMsg","confirm","confirmButtonText","cancelButtonText","type","method","headers","body","JSON","stringify","success","fetchCameraData","navigator","mediaDevices","getUserMedia","video","audio","$nextTick","videoElement","$refs","cameraVideo","srcObject","getTracks","forEach","track","stop","takeSnapshot","canvas","document","createElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","toDataURL","saveSnapshotToServer","imageData","handlePageChange","page","viewRecordDetail","recordId","viewRecordImage","imageUrl","id","hasImage","closeRecordDetail"],"sources":["D:/admin-system/src/views/DoorMonitor/doorMonitor.js"],"sourcesContent":["import { ElMessage, ElMessageBox } from 'element-plus';\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\r\n\r\nexport default {\r\n  name: 'DoorMonitor',\r\n  \r\n  data() {\r\n    return {\r\n      // 门禁状态相关\r\n      doorStatus: {\r\n        status: '未知',\r\n        lastUpdated: null\r\n      },\r\n      \r\n      // 摄像头相关\r\n      cameraData: {\r\n        isPlaying: false,\r\n        stream: null,\r\n        snapshot: null\r\n      },\r\n      \r\n      // 访问记录相关\r\n      accessRecords: [],\r\n      pagination: {\r\n        currentPage: 1,\r\n        pageSize: 10,\r\n        total: 0\r\n      },\r\n      \r\n      // 控制加载状态\r\n      loading: {\r\n        doorStatus: false,\r\n        camera: false,\r\n        records: false\r\n      },\r\n      \r\n      // 错误信息\r\n      error: {\r\n        doorStatus: null,\r\n        camera: null,\r\n        records: null\r\n      },\r\n      \r\n      // 当前记录详情\r\n      currentRecord: null,\r\n      recordDetailVisible: false,\r\n      \r\n      // 轮询定时器\r\n      pollingTimers: {\r\n        doorStatus: null\r\n      }\r\n    };\r\n  },\r\n  \r\n  computed: {\r\n    totalPages() {\r\n      return Math.ceil(this.pagination.total / this.pagination.pageSize);\r\n    }\r\n  },\r\n  \r\n  mounted() {\r\n    // 初始化获取数据\r\n    this.fetchDoorStatus();\r\n    this.fetchAccessRecords();\r\n    \r\n    // 设置门禁状态轮询 (每30秒更新一次)\r\n    this.pollingTimers.doorStatus = setInterval(() => {\r\n      this.fetchDoorStatus();\r\n    }, 30000);\r\n  },\r\n  \r\n  beforeUnmount() {\r\n    // 清除轮询定时器\r\n    if (this.pollingTimers.doorStatus) {\r\n      clearInterval(this.pollingTimers.doorStatus);\r\n    }\r\n    \r\n    // 停止摄像头流\r\n    this.stopCameraStream();\r\n  },\r\n  \r\n  methods: {\r\n    // 格式化时间\r\n    formatTime(timestamp) {\r\n      if (!timestamp) return '未知';\r\n      \r\n      const date = new Date(timestamp);\r\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;\r\n    },\r\n    \r\n    // 获取门禁状态\r\n    async fetchDoorStatus() {\r\n      if (this.loading.doorStatus) return;\r\n      \r\n      this.loading.doorStatus = true;\r\n      this.error.doorStatus = null;\r\n      \r\n      try {\r\n        // 调用API获取门禁状态\r\n        const response = await fetch('/api/door/status');\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`获取门禁状态失败: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        this.doorStatus = {\r\n          status: data.isOpen ? '开启' : '关闭',\r\n          lastUpdated: data.lastUpdated || new Date().toISOString()\r\n        };\r\n        \r\n      } catch (error) {\r\n        console.error('获取门禁状态失败:', error);\r\n        this.error.doorStatus = `获取门禁状态失败: ${error.message}`;\r\n        ElMessage.error(this.error.doorStatus);\r\n      } finally {\r\n        this.loading.doorStatus = false;\r\n      }\r\n    },\r\n    \r\n    // 控制门禁\r\n    async controlDoor(action) {\r\n      if (this.loading.doorStatus) return;\r\n      \r\n      const actionText = action === 'open' ? '开启' : '关闭';\r\n      const confirmMsg = `确定要${actionText}门禁吗？`;\r\n      \r\n      try {\r\n        await ElMessageBox.confirm(confirmMsg, '操作确认', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        });\r\n        \r\n        this.loading.doorStatus = true;\r\n        this.error.doorStatus = null;\r\n        \r\n        // 调用API控制门禁\r\n        const response = await fetch('/api/door/control', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ \r\n            action: action,\r\n            timestamp: new Date().toISOString()\r\n          })\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`${actionText}门禁失败: ${response.status}`);\r\n        }\r\n        \r\n        // 更新门禁状态\r\n        this.doorStatus = {\r\n          status: action === 'open' ? '开启' : '关闭',\r\n          lastUpdated: new Date().toISOString()\r\n        };\r\n        \r\n        ElMessage.success(`门禁已${actionText}`);\r\n      } catch (error) {\r\n        if (error === 'cancel') return;\r\n        \r\n        console.error(`${actionText}门禁失败:`, error);\r\n        this.error.doorStatus = `${actionText}门禁失败: ${error.message}`;\r\n        ElMessage.error(this.error.doorStatus);\r\n      } finally {\r\n        this.loading.doorStatus = false;\r\n      }\r\n    },\r\n    \r\n    // 获取摄像头数据\r\n    async fetchCameraData() {\r\n      if (this.loading.camera) return;\r\n      \r\n      this.loading.camera = true;\r\n      this.error.camera = null;\r\n      \r\n      try {\r\n        // 请求摄像头权限\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          video: true,\r\n          audio: false\r\n        });\r\n        \r\n        this.cameraData.stream = stream;\r\n        this.cameraData.isPlaying = true;\r\n        \r\n        // 延迟执行，确保DOM已更新\r\n        this.$nextTick(() => {\r\n          const videoElement = this.$refs.cameraVideo;\r\n          if (videoElement) {\r\n            videoElement.srcObject = stream;\r\n          }\r\n        });\r\n        \r\n      } catch (error) {\r\n        console.error('获取摄像头数据失败:', error);\r\n        this.error.camera = `获取摄像头数据失败: ${error.message}`;\r\n        ElMessage.error(this.error.camera);\r\n      } finally {\r\n        this.loading.camera = false;\r\n      }\r\n    },\r\n    \r\n    // 停止摄像头流\r\n    stopCameraStream() {\r\n      if (this.cameraData.stream) {\r\n        this.cameraData.stream.getTracks().forEach(track => track.stop());\r\n        this.cameraData.stream = null;\r\n      }\r\n      this.cameraData.isPlaying = false;\r\n    },\r\n    \r\n    // 拍摄快照\r\n    takeSnapshot() {\r\n      if (!this.cameraData.isPlaying || !this.$refs.cameraVideo) return;\r\n      \r\n      try {\r\n        const video = this.$refs.cameraVideo;\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = video.videoWidth;\r\n        canvas.height = video.videoHeight;\r\n        \r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        \r\n        // 获取图像数据\r\n        this.cameraData.snapshot = canvas.toDataURL('image/jpeg');\r\n        \r\n        // 保存快照到服务器\r\n        this.saveSnapshotToServer(this.cameraData.snapshot);\r\n        \r\n      } catch (error) {\r\n        console.error('拍摄快照失败:', error);\r\n        ElMessage.error(`拍摄快照失败: ${error.message}`);\r\n      }\r\n    },\r\n    \r\n    // 保存快照到服务器\r\n    async saveSnapshotToServer(imageData) {\r\n      try {\r\n        const response = await fetch('/api/door/snapshot', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            imageData: imageData,\r\n            timestamp: new Date().toISOString()\r\n          })\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`保存快照失败: ${response.status}`);\r\n        }\r\n        \r\n        ElMessage.success('快照已保存');\r\n        \r\n        // 刷新访问记录\r\n        this.fetchAccessRecords();\r\n        \r\n      } catch (error) {\r\n        console.error('保存快照失败:', error);\r\n        ElMessage.error(`保存快照失败: ${error.message}`);\r\n      }\r\n    },\r\n    \r\n    // 获取访问记录\r\n    async fetchAccessRecords() {\r\n      if (this.loading.records) return;\r\n      \r\n      this.loading.records = true;\r\n      this.error.records = null;\r\n      \r\n      try {\r\n        // 调用API获取访问记录\r\n        const response = await fetch(`/api/door/access-records?page=${this.pagination.currentPage}&pageSize=${this.pagination.pageSize}`);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`获取访问记录失败: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        this.accessRecords = data.records || [];\r\n        this.pagination.total = data.total || 0;\r\n        \r\n      } catch (error) {\r\n        console.error('获取访问记录失败:', error);\r\n        this.error.records = `获取访问记录失败: ${error.message}`;\r\n        ElMessage.error(this.error.records);\r\n      } finally {\r\n        this.loading.records = false;\r\n      }\r\n    },\r\n    \r\n    // 处理分页变化\r\n    handlePageChange(page) {\r\n      this.pagination.currentPage = page;\r\n      this.fetchAccessRecords();\r\n    },\r\n    \r\n    // 查看记录详情\r\n    async viewRecordDetail(recordId) {\r\n      try {\r\n        // 调用API获取记录详情\r\n        const response = await fetch(`/api/door/access-records/${recordId}`);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`获取记录详情失败: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        this.currentRecord = data;\r\n        this.recordDetailVisible = true;\r\n        \r\n      } catch (error) {\r\n        console.error('获取记录详情失败:', error);\r\n        ElMessage.error(`获取记录详情失败: ${error.message}`);\r\n      }\r\n    },\r\n    \r\n    // 查看记录图片\r\n    async viewRecordImage(recordId) {\r\n      try {\r\n        // 调用API获取记录图片\r\n        const response = await fetch(`/api/door/access-records/${recordId}/image`);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`获取记录图片失败: ${response.status}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        if (!data.imageUrl) {\r\n          throw new Error('没有可用的图片');\r\n        }\r\n        \r\n        // 打开图片预览\r\n        this.currentRecord = {\r\n          id: recordId,\r\n          hasImage: true,\r\n          imageUrl: data.imageUrl\r\n        };\r\n        \r\n        this.recordDetailVisible = true;\r\n        \r\n      } catch (error) {\r\n        console.error('获取记录图片失败:', error);\r\n        ElMessage.error(`获取记录图片失败: ${error.message}`);\r\n      }\r\n    },\r\n    \r\n    // 关闭记录详情对话框\r\n    closeRecordDetail() {\r\n      this.recordDetailVisible = false;\r\n      this.currentRecord = null;\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}